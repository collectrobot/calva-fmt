{
	"information_for_contributors": [
		"This file is generated from ./atom-language-scheme/grammars/scheme.cson"
	],
	"name": "Scheme",
	"scopeName": "source.scheme",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#shebang-comment"
		},
		{
			"include": "#quoted-sexp"
		},
		{
			"include": "#sexp"
		},
		{
			"include": "#keyfn"
		},
		{
			"include": "#string"
		},
		{
			"include": "#vector"
		},
		{
			"include": "#set"
		},
		{
			"include": "#map"
		},
		{
			"include": "#regexp"
		},
		{
			"include": "#var"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#dynamic-variables"
		},
		{
			"include": "#metadata"
		},
		{
			"include": "#namespace-symbol"
		},
		{
			"include": "#symbol"
		}
	],
	"repository": {
		"comment": {
			"begin": "(?<!\\\\);",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.scheme"
				}
			},
			"end": "$",
			"name": "comment.line.semicolon.scheme"
		},
		"constants": {
			"patterns": [
				{
					"match": "(nil)(?=(\\s|\\)|\\]|\\}))",
					"name": "constant.language.nil.scheme"
				},
				{
					"match": "(true|false)",
					"name": "constant.language.boolean.scheme"
				},
				{
					"match": "(-?\\d+/\\d+)",
					"name": "constant.numeric.ratio.scheme"
				},
				{
					"match": "(-?\\d+[rR]\\w+)",
					"name": "constant.numeric.arbitrary-radix.scheme"
				},
				{
					"match": "(-?0[xX][0-9a-fA-F]+)",
					"name": "constant.numeric.hexadecimal.scheme"
				},
				{
					"match": "(-?0\\d+)",
					"name": "constant.numeric.octal.scheme"
				},
				{
					"match": "(-?\\d+\\.\\d+([eE][+-]?\\d+)?M)",
					"name": "constant.numeric.bigdecimal.scheme"
				},
				{
					"match": "(-?\\d+\\.\\d+([eE][+-]?\\d+)?)",
					"name": "constant.numeric.double.scheme"
				},
				{
					"match": "(-?\\d+N)",
					"name": "constant.numeric.bigint.scheme"
				},
				{
					"match": "(-?\\d+)",
					"name": "constant.numeric.long.scheme"
				},
				{
					"include": "#keyword"
				}
			]
		},
		"keyword": {
			"match": "(?<=(\\s|\\(|\\[|\\{)):[\\w\\#\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))",
			"name": "constant.keyword.scheme"
		},
		"keyfn": {
			"patterns": [
				{
					"match": "(?<=(\\s|\\(|\\[|\\{))(if(-[-\\p{Ll}\\?]*)?|when(-[-\\p{Ll}]*)?|for(-[-\\p{Ll}]*)?|cond|do|let(-[-\\p{Ll}\\?]*)?|binding|loop|recur|fn|throw[\\p{Ll}\\-]*|try|catch|finally|([\\p{Ll}]*case))(?=(\\s|\\)|\\]|\\}))",
					"name": "storage.control.scheme"
				},
				{
					"match": "(?<=(\\s|\\(|\\[|\\{))(declare-?|(in-)?ns|import|use|require|load|compile|(def(?!ault)[\\p{Ll}\\-]*))(?=(\\s|\\)|\\]|\\}))",
					"name": "keyword.control.scheme"
				}
			]
		},
		"dynamic-variables": {
			"match": "\\*[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\d]+\\*",
			"name": "meta.symbol.dynamic.scheme"
		},
		"map": {
			"begin": "(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.map.begin.scheme"
				}
			},
			"end": "(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.map.end.trailing.scheme"
				},
				"2": {
					"name": "punctuation.section.map.end.scheme"
				}
			},
			"name": "meta.map.scheme",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"metadata": {
			"patterns": [
				{
					"begin": "(\\^\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.section.metadata.map.begin.scheme"
						}
					},
					"end": "(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.metadata.map.end.trailing.scheme"
						},
						"2": {
							"name": "punctuation.section.metadata.map.end.scheme"
						}
					},
					"name": "meta.metadata.map.scheme",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(\\^)",
					"end": "(\\s)",
					"name": "meta.metadata.simple.scheme",
					"patterns": [
						{
							"include": "#keyword"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"quoted-sexp": {
			"begin": "(['``]\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.expression.begin.scheme"
				}
			},
			"end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.expression.end.trailing.scheme"
				},
				"2": {
					"name": "punctuation.section.expression.end.trailing.scheme"
				},
				"3": {
					"name": "punctuation.section.expression.end.scheme"
				}
			},
			"name": "meta.quoted-expression.scheme",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"regexp": {
			"begin": "#\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.regexp.begin.scheme"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.regexp.end.scheme"
				}
			},
			"name": "string.regexp.scheme",
			"patterns": [
				{
					"include": "#regexp_escaped_char"
				}
			]
		},
		"regexp_escaped_char": {
			"match": "\\\\.",
			"name": "constant.character.escape.scheme"
		},
		"set": {
			"begin": "(\\#\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.set.begin.scheme"
				}
			},
			"end": "(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.set.end.trailing.scheme"
				},
				"2": {
					"name": "punctuation.section.set.end.scheme"
				}
			},
			"name": "meta.set.scheme",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"sexp": {
			"begin": "(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.expression.begin.scheme"
				}
			},
			"end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.expression.end.trailing.scheme"
				},
				"2": {
					"name": "punctuation.section.expression.end.trailing.scheme"
				},
				"3": {
					"name": "punctuation.section.expression.end.scheme"
				}
			},
			"name": "meta.expression.scheme",
			"patterns": [
				{
					"begin": "(?<=\\()(ns|declare|def(?!ault)[\\w\\d._:+=><!?*-]*|[\\w._:+=><!?*-][\\w\\d._:+=><!?*-]*/def(?!ault)[\\w\\d._:+=><!?*-]*)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.scheme"
						}
					},
					"end": "(?=\\))",
					"name": "meta.definition.global.scheme",
					"patterns": [
						{
							"include": "#metadata"
						},
						{
							"include": "#dynamic-variables"
						},
						{
							"match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)",
							"name": "entity.global.scheme"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "#keyfn"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#vector"
				},
				{
					"include": "#map"
				},
				{
					"include": "#set"
				},
				{
					"include": "#sexp"
				},
				{
					"match": "(?<=\\()([^\"]+?)(?=\\s|\\))",
					"captures": {
						"1": {
							"name": "entity.name.function.scheme"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"shebang-comment": {
			"begin": "^(#!)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.shebang.scheme"
				}
			},
			"end": "$",
			"name": "comment.line.shebang.scheme"
		},
		"string": {
			"begin": "(?<!\\\\)(\")",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.scheme"
				}
			},
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.scheme"
				}
			},
			"name": "string.quoted.double.scheme",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.scheme"
				}
			]
		},
		"namespace-symbol": {
			"patterns": [
				{
					"match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)/",
					"captures": {
						"1": {
							"name": "meta.symbol.namespace.scheme"
						}
					}
				}
			]
		},
		"symbol": {
			"patterns": [
				{
					"match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)",
					"name": "meta.symbol.scheme"
				}
			]
		},
		"var": {
			"match": "(?<=(\\s|\\(|\\[|\\{)\\#)'[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}))",
			"name": "meta.var.scheme"
		},
		"vector": {
			"begin": "(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.vector.begin.scheme"
				}
			},
			"end": "(\\](?=[\\}\\]\\)\\s]*(?:;|$)))|(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.vector.end.trailing.scheme"
				},
				"2": {
					"name": "punctuation.section.vector.end.scheme"
				}
			},
			"name": "meta.vector.scheme",
			"patterns": [
				{
					"include": "$self"
				}
			]
		}
	}
}